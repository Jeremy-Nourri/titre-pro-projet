stages:
  - test
  - build
  - deploy

test-backend:
  stage: test
  image: maven:3.8.5-openjdk-17
  variables:
    MAVEN_OPTS: "-Dspring.profiles.active=test"
  script:
    - echo "DB_URL=$DB_URL" > server/.env
    - echo "DB_USERNAME=$DB_USERNAME" >> server/.env
    - echo "DB_PASSWORD=$DB_PASSWORD" >> server/.env
    - echo "JWT_SECRET=$JWT_SECRET" >> server/.env
    - echo "JWT_EXPIRATION=$JWT_EXPIRATION" >> server/.env
    - cd server
    - mvn clean test

test-frontend:
  stage: test
  image: node:18
  script:
    - cd client
    - npm install
    - npm run test


build-backend:
  stage: build
  image: maven:3.8.5-openjdk-17

  variables:
    MAVEN_OPTS: "-Dspring.datasource.url=$DB_URL -Dspring.datasource.username=$DB_USERNAME -Dspring.datasource.password=$DB_PASSWORD -Djwt.secret=$JWT_SECRET -Djwt.expiration=$JWT_EXPIRATION"
  script:
    - cd server
    - mvn clean package -DskipTests
  artifacts:
    paths:
      - server/target/*.jar

  dependencies:
    - test-backend

build-frontend:
  stage: build
  image: node:18
  variables:
    VITE_API_URL: $VITE_API_URL
  script:
    - cd client
    - npm install
    - npm run build
  artifacts:
    paths:
      - client/dist

  dependencies:
    - test-frontend

deploy:
  stage: deploy
  image: docker/compose:latest
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker-compose down --remove-orphans
    - docker-compose up -d
    - docker ps -a
  only:
    - main

